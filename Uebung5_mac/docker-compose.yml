version: "3.9"
services:
  db:
    platform: linux/amd64
    build:
      context: .
      dockerfile: db.Dockerfile
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data   # Nur Datenvolume (persistente Speicherung)
      - ./geodata:/data:ro                # 只读挂载 geodata，便于容器内访问数据
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
      FLASK_APP: app.py
      FLASK_ENV: development
    ports:
      - "5000:5000"
    command: python app.py
    working_dir: /app

  geoserver:
    image: kartoza/geoserver:2.24.2
    container_name: geoserver
    depends_on:
      db:
        condition: service_healthy
    environment:
      - GEOSERVER_ADMIN_PASSWORD=geoserver
      - GEOSERVER_ADMIN_USER=admin
      - SAMPLE_DATA=false
      - INITIAL_MEMORY=1G
      - MAXIMUM_MEMORY=2G
    ports:
      - "8080:8080"
    volumes:
      - geoserver_data:/opt/geoserver/data_dir
      - ./geodata:/data:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/geoserver/web/"]
      interval: 10s
      timeout: 5s
      retries: 20

  geoserver-init:
    build:
      context: ./geoserver_init
      dockerfile: Dockerfile
    depends_on:
      geoserver:
        condition: service_healthy
    volumes:
      - ./geodata:/data:ro

  gdal-import:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGPASSWORD: postgres
    volumes:
      - ./geodata:/data:ro

volumes:
  dbdata:
  geoserver_data:
